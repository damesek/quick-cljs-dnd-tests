shadow$provide.module$node_modules$dnd_core$dist$reducers$dragOffset=function(global,require,module,exports){function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{},ownKeys=Object.keys(source);"function"===typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable})));ownKeys.forEach(function(key){var value=source[key];key in
target?Object.defineProperty(target,key,{value,enumerable:!0,configurable:!0,writable:!0}):target[key]=value})}return target}Object.defineProperty(exports,"__esModule",{value:!0});exports.reduce=function(state=initialState,action){const {payload}=action;switch(action.type){case _index.INIT_COORDS:case _index.BEGIN_DRAG:return{initialSourceClientOffset:payload.sourceClientOffset,initialClientOffset:payload.clientOffset,clientOffset:payload.clientOffset};case _index.HOVER:return(0,_equality.areCoordsEqual)(state.clientOffset,
payload.clientOffset)?state:_objectSpread({},state,{clientOffset:payload.clientOffset});case _index.END_DRAG:case _index.DROP:return initialState;default:return state}};var _index=require("module$node_modules$dnd_core$dist$actions$dragDrop$index"),_equality=require("module$node_modules$dnd_core$dist$utils$equality");const initialState={initialSourceClientOffset:null,initialClientOffset:null,clientOffset:null}}
//# sourceMappingURL=module$node_modules$dnd_core$dist$reducers$dragOffset.js.map
