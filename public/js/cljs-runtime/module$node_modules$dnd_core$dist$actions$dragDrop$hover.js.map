{
"version":3,
"file":"module$node_modules$dnd_core$dist$actions$dragDrop$hover.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkErHC,QAASA,gBAAe,CAACC,SAAD,CAAYC,OAAZ,CAAqBC,QAArB,CAA+B,CAErDF,SAAUG,CAAAA,OAAV,CAAkB,QAAS,CAACC,QAAD,CAAW,CACrBF,QAASG,CAAAA,SAATC,CAAmBF,QAAnBE,CACRC,CAAAA,KAAP,CAAaN,OAAb,CAAsBG,QAAtB,CAFoC,CAAtC,CAFqD,CA/DvDI,MAAOC,CAAAA,cAAP,CAAsBX,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CY,MAAO,CAAA,CADoC,CAA7C,CAGAZ,QAAQa,CAAAA,WAAR,CAQAA,QAAoB,CAACC,OAAD,CAAU,CAC5B,MAAOL,SAAc,CAACM,YAAD,CAAe,CAClCC,YADkC,CAAA,CAEhC,EAFiB,CAEb,CAoBR,GAAIC,UAAWC,CAAAA,SAAf,EAA0BC,KAAMC,CAAAA,OAAN,CAnBDL,YAmBC,CAA1B,CAAuD,oCAAvD,CAlBQb,aAAAA;AAAYa,YAAaM,CAAAA,KAAb,CAAmB,CAAnB,CAClB,OAAMlB,QAAUW,OAAQQ,CAAAA,UAAR,EAAhB,CACMlB,SAAWU,OAAQS,CAAAA,WAAR,EACjB,KAAMC,gBAAkBrB,OAAQsB,CAAAA,WAAR,EAkC1B,KAAK,IAAIC,EAjCoBxB,YAiCNyB,CAAAA,MAAdD,CAAuB,CAAhC,CAAwC,CAAxC,EAAmCA,CAAnC,CAA2CA,CAAA,EAA3C,CAAgD,CAE9C,MAAME,WAnCgCxB,QAmCVyB,CAAAA,aAAT,CAnCQ3B,YAkCVI,CAAUoB,CAAVpB,CACE,CAEd,IAAIwB,YAAaC,CAAAA,WAAjB,EAA8BH,UAA9B,CArC2CJ,eAqC3C,CAAL,EArC2BtB,YAsCf8B,CAAAA,MAAV,CAAiBN,CAAjB,CAAoB,CAApB,CAL4C,CAfhD,GAAIT,UAAWC,CAAAA,SAAf,EAjB6Bf,OAiBK8B,CAAAA,UAAR,EAA1B,CAAgD,uCAAhD,CACA,IAAIhB,UAAWC,CAAAA,SAAf,EAA0B,CAlBGf,OAkBM+B,CAAAA,OAAR,EAA3B,CAA8C,+BAA9C,CAEA,KAASR,eAAT,CAAa,CAAb,CAAgBA,eAAhB;AApBkBxB,YAoBYyB,CAAAA,MAA9B,CAAsCD,eAAA,EAAtC,CACQpB,CAGN,CAxBgBJ,YAqBC,CAAUwB,eAAV,CAGjB,CAFA,GAAIT,UAAWC,CAAAA,SAAf,EAtBgBhB,YAsBoBiC,CAAAA,WAAV,CAAsB7B,CAAtB,CAA1B,GAA8DoB,eAA9D,CAAiE,sDAAjE,CAEA,CADMlB,CACN,CAxBoCJ,QAuBZG,CAAAA,SAAT,CAAmBD,CAAnB,CACf,CAAA,GAAIW,UAAWC,CAAAA,SAAf,EAA0BV,CAA1B,CAAkC,sCAAlC,CAvBAP,gBAAA,CAAgBC,YAAhB,CAA2BC,OAA3B,CAAoCC,QAApC,CACA,OAAO,CACLgC,KAAMC,MAAOC,CAAAA,KADR,CAELC,QAAS,CACPrC,UAAAA,YADO,CAEPc,aAAcA,YAAdA,EAA8B,IAFvB,CAFJ,CATD,CAHoB,CAN9B,KAAIC,WAAanB,OAAA,CAAQ,qDAAR,CAAjB;AAEIgC,aAAehC,OAAA,CAAQ,qDAAR,CAFnB,CAIIuC,OAASvC,OAAA,CAAQ,0DAAR,CAZwG;",
"sources":["node_modules/dnd-core/dist/actions/dragDrop/hover.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dnd_core$dist$actions$dragDrop$hover\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHover = createHover;\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nvar _matchesType = require(\"../../utils/matchesType.js\");\n\nvar _types = require(\"./types.js\");\n\nfunction createHover(manager) {\n  return function hover(targetIdsArg, {\n    clientOffset\n  } = {}) {\n    verifyTargetIdsIsArray(targetIdsArg);\n    const targetIds = targetIdsArg.slice(0);\n    const monitor = manager.getMonitor();\n    const registry = manager.getRegistry();\n    const draggedItemType = monitor.getItemType();\n    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);\n    checkInvariants(targetIds, monitor, registry);\n    hoverAllTargets(targetIds, monitor, registry);\n    return {\n      type: _types.HOVER,\n      payload: {\n        targetIds,\n        clientOffset: clientOffset || null\n      }\n    };\n  };\n}\n\nfunction verifyTargetIdsIsArray(targetIdsArg) {\n  (0, _invariant.invariant)(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');\n}\n\nfunction checkInvariants(targetIds, monitor, registry) {\n  (0, _invariant.invariant)(monitor.isDragging(), 'Cannot call hover while not dragging.');\n  (0, _invariant.invariant)(!monitor.didDrop(), 'Cannot call hover after drop.');\n\n  for (let i = 0; i < targetIds.length; i++) {\n    const targetId = targetIds[i];\n    (0, _invariant.invariant)(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');\n    const target = registry.getTarget(targetId);\n    (0, _invariant.invariant)(target, 'Expected targetIds to be registered.');\n  }\n}\n\nfunction removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {\n  // Remove those targetIds that don't match the targetType.  This\n  // fixes shallow isOver which would only be non-shallow because of\n  // non-matching targets.\n  for (let i = targetIds.length - 1; i >= 0; i--) {\n    const targetId = targetIds[i];\n    const targetType = registry.getTargetType(targetId);\n\n    if (!(0, _matchesType.matchesType)(targetType, draggedItemType)) {\n      targetIds.splice(i, 1);\n    }\n  }\n}\n\nfunction hoverAllTargets(targetIds, monitor, registry) {\n  // Finally call hover on all matching targets.\n  targetIds.forEach(function (targetId) {\n    const target = registry.getTarget(targetId);\n    target.hover(monitor, targetId);\n  });\n}\n};"],
"names":["shadow$provide","global","require","module","exports","hoverAllTargets","targetIds","monitor","registry","forEach","targetId","getTarget","target","hover","Object","defineProperty","value","createHover","manager","targetIdsArg","clientOffset","_invariant","invariant","Array","isArray","slice","getMonitor","getRegistry","draggedItemType","getItemType","i","length","targetType","getTargetType","_matchesType","matchesType","splice","isDragging","didDrop","lastIndexOf","type","_types","HOVER","payload"]
}
