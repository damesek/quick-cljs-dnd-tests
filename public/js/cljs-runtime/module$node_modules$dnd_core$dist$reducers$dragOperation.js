shadow$provide.module$node_modules$dnd_core$dist$reducers$dragOperation=function(global,require,module,exports){function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{},ownKeys=Object.keys(source);"function"===typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable})));ownKeys.forEach(function(key){var value=source[key];
key in target?Object.defineProperty(target,key,{value,enumerable:!0,configurable:!0,writable:!0}):target[key]=value})}return target}Object.defineProperty(exports,"__esModule",{value:!0});exports.reduce=function(state=initialState,action){const {payload}=action;switch(action.type){case _index.BEGIN_DRAG:return _objectSpread({},state,{itemType:payload.itemType,item:payload.item,sourceId:payload.sourceId,isSourcePublic:payload.isSourcePublic,dropResult:null,didDrop:!1});case _index.PUBLISH_DRAG_SOURCE:return _objectSpread({},
state,{isSourcePublic:!0});case _index.HOVER:return _objectSpread({},state,{targetIds:payload.targetIds});case _registry.REMOVE_TARGET:return-1===state.targetIds.indexOf(payload.targetId)?state:_objectSpread({},state,{targetIds:(0,_js_utils.without)(state.targetIds,payload.targetId)});case _index.DROP:return _objectSpread({},state,{dropResult:payload.dropResult,didDrop:!0,targetIds:[]});case _index.END_DRAG:return _objectSpread({},state,{itemType:null,item:null,sourceId:null,dropResult:null,didDrop:!1,
isSourcePublic:null,targetIds:[]});default:return state}};var _index=require("module$node_modules$dnd_core$dist$actions$dragDrop$index"),_registry=require("module$node_modules$dnd_core$dist$actions$registry"),_js_utils=require("module$node_modules$dnd_core$dist$utils$js_utils");const initialState={itemType:null,item:null,sourceId:null,targetIds:[],dropResult:null,didDrop:!1,isSourcePublic:null}}
//# sourceMappingURL=module$node_modules$dnd_core$dist$reducers$dragOperation.js.map
