shadow$provide.module$node_modules$react_dnd$dist$internals$DropTargetMonitorImpl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.DropTargetMonitorImpl=void 0;var _invariant=require("module$node_modules$$react_dnd$invariant$dist$index");let isCallingCanDrop=!1;class DropTargetMonitorImpl{receiveHandlerId(targetId){this.targetId=targetId}getHandlerId(){return this.targetId}subscribeToStateChange(listener,options){return this.internalMonitor.subscribeToStateChange(listener,
options)}canDrop(){if(!this.targetId)return!1;(0,_invariant.invariant)(!isCallingCanDrop,"You may not call monitor.canDrop() inside your canDrop() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor");try{return isCallingCanDrop=!0,this.internalMonitor.canDropOnTarget(this.targetId)}finally{isCallingCanDrop=!1}}isOver(options){return this.targetId?this.internalMonitor.isOverTarget(this.targetId,options):!1}getItemType(){return this.internalMonitor.getItemType()}getItem(){return this.internalMonitor.getItem()}getDropResult(){return this.internalMonitor.getDropResult()}didDrop(){return this.internalMonitor.didDrop()}getInitialClientOffset(){return this.internalMonitor.getInitialClientOffset()}getInitialSourceClientOffset(){return this.internalMonitor.getInitialSourceClientOffset()}getSourceClientOffset(){return this.internalMonitor.getSourceClientOffset()}getClientOffset(){return this.internalMonitor.getClientOffset()}getDifferenceFromInitialOffset(){return this.internalMonitor.getDifferenceFromInitialOffset()}constructor(manager){this.targetId=
null;this.internalMonitor=manager.getMonitor()}}exports.DropTargetMonitorImpl=DropTargetMonitorImpl}
//# sourceMappingURL=module$node_modules$react_dnd$dist$internals$DropTargetMonitorImpl.js.map
