{
"version":3,
"file":"module$node_modules$react_dnd$dist$internals$TargetConnector.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/react-dnd/dist/internals/TargetConnector.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_dnd$dist$internals$TargetConnector\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TargetConnector = void 0;\n\nvar _shallowequal = require(\"@react-dnd/shallowequal\");\n\nvar _isRef = require(\"./isRef.js\");\n\nvar _wrapConnectorHooks = require(\"./wrapConnectorHooks.js\");\n\nclass TargetConnector {\n  get connectTarget() {\n    return this.dropTarget;\n  }\n\n  reconnect() {\n    // if nothing has changed then don't resubscribe\n    const didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();\n\n    if (didChange) {\n      this.disconnectDropTarget();\n    }\n\n    const dropTarget = this.dropTarget;\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dropTarget) {\n      this.lastConnectedDropTarget = dropTarget;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDropTarget = dropTarget;\n      this.lastConnectedDropTargetOptions = this.dropTargetOptions;\n      this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);\n    }\n  }\n\n  receiveHandlerId(newHandlerId) {\n    if (newHandlerId === this.handlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n\n  get dropTargetOptions() {\n    return this.dropTargetOptionsInternal;\n  }\n\n  set dropTargetOptions(options) {\n    this.dropTargetOptionsInternal = options;\n  }\n\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n\n  didDropTargetChange() {\n    return this.lastConnectedDropTarget !== this.dropTarget;\n  }\n\n  didOptionsChange() {\n    return !(0, _shallowequal.shallowEqual)(this.lastConnectedDropTargetOptions, this.dropTargetOptions);\n  }\n\n  disconnectDropTarget() {\n    if (this.unsubscribeDropTarget) {\n      this.unsubscribeDropTarget();\n      this.unsubscribeDropTarget = undefined;\n    }\n  }\n\n  get dropTarget() {\n    return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;\n  }\n\n  clearDropTarget() {\n    this.dropTargetRef = null;\n    this.dropTargetNode = null;\n  }\n\n  constructor(backend) {\n    this.hooks = (0, _wrapConnectorHooks.wrapConnectorHooks)({\n      dropTarget: (node, options) => {\n        this.clearDropTarget();\n        this.dropTargetOptions = options;\n\n        if ((0, _isRef.isRef)(node)) {\n          this.dropTargetRef = node;\n        } else {\n          this.dropTargetNode = node;\n        }\n\n        this.reconnect();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dropTargetRef = null;\n    this.dropTargetOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDropTarget = null;\n    this.lastConnectedDropTargetOptions = null;\n    this.backend = backend;\n  }\n\n}\n\nexports.TargetConnector = TargetConnector;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","TargetConnector","_shallowequal","_isRef","_wrapConnectorHooks","dropTarget","reconnect","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","handlerId","lastConnectedHandlerId","lastConnectedDropTarget","lastConnectedDropTargetOptions","dropTargetOptions","unsubscribeDropTarget","backend","connectDropTarget","receiveHandlerId","newHandlerId","dropTargetOptionsInternal","options","shallowEqual","undefined","dropTargetNode","dropTargetRef","current","clearDropTarget","constructor","hooks","wrapConnectorHooks","node","isRef"]
}
