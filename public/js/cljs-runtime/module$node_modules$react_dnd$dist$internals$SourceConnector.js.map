{
"version":3,
"file":"module$node_modules$react_dnd$dist$internals$SourceConnector.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/react-dnd/dist/internals/SourceConnector.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_dnd$dist$internals$SourceConnector\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SourceConnector = void 0;\n\nvar _shallowequal = require(\"@react-dnd/shallowequal\");\n\nvar _isRef = require(\"./isRef.js\");\n\nvar _wrapConnectorHooks = require(\"./wrapConnectorHooks.js\");\n\nclass SourceConnector {\n  receiveHandlerId(newHandlerId) {\n    if (this.handlerId === newHandlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n\n  get connectTarget() {\n    return this.dragSource;\n  }\n\n  get dragSourceOptions() {\n    return this.dragSourceOptionsInternal;\n  }\n\n  set dragSourceOptions(options) {\n    this.dragSourceOptionsInternal = options;\n  }\n\n  get dragPreviewOptions() {\n    return this.dragPreviewOptionsInternal;\n  }\n\n  set dragPreviewOptions(options) {\n    this.dragPreviewOptionsInternal = options;\n  }\n\n  reconnect() {\n    const didChange = this.reconnectDragSource();\n    this.reconnectDragPreview(didChange);\n  }\n\n  reconnectDragSource() {\n    const dragSource = this.dragSource; // if nothing has changed then don't resubscribe\n\n    const didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();\n\n    if (didChange) {\n      this.disconnectDragSource();\n    }\n\n    if (!this.handlerId) {\n      return didChange;\n    }\n\n    if (!dragSource) {\n      this.lastConnectedDragSource = dragSource;\n      return didChange;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragSource = dragSource;\n      this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n      this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n    }\n\n    return didChange;\n  }\n\n  reconnectDragPreview(forceDidChange = false) {\n    const dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe\n\n    const didChange = forceDidChange || this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();\n\n    if (didChange) {\n      this.disconnectDragPreview();\n    }\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dragPreview) {\n      this.lastConnectedDragPreview = dragPreview;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragPreview = dragPreview;\n      this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n      this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n    }\n  }\n\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n\n  didConnectedDragSourceChange() {\n    return this.lastConnectedDragSource !== this.dragSource;\n  }\n\n  didConnectedDragPreviewChange() {\n    return this.lastConnectedDragPreview !== this.dragPreview;\n  }\n\n  didDragSourceOptionsChange() {\n    return !(0, _shallowequal.shallowEqual)(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n  }\n\n  didDragPreviewOptionsChange() {\n    return !(0, _shallowequal.shallowEqual)(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n  }\n\n  disconnectDragSource() {\n    if (this.dragSourceUnsubscribe) {\n      this.dragSourceUnsubscribe();\n      this.dragSourceUnsubscribe = undefined;\n    }\n  }\n\n  disconnectDragPreview() {\n    if (this.dragPreviewUnsubscribe) {\n      this.dragPreviewUnsubscribe();\n      this.dragPreviewUnsubscribe = undefined;\n      this.dragPreviewNode = null;\n      this.dragPreviewRef = null;\n    }\n  }\n\n  get dragSource() {\n    return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;\n  }\n\n  get dragPreview() {\n    return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;\n  }\n\n  clearDragSource() {\n    this.dragSourceNode = null;\n    this.dragSourceRef = null;\n  }\n\n  clearDragPreview() {\n    this.dragPreviewNode = null;\n    this.dragPreviewRef = null;\n  }\n\n  constructor(backend) {\n    this.hooks = (0, _wrapConnectorHooks.wrapConnectorHooks)({\n      dragSource: (node, options) => {\n        this.clearDragSource();\n        this.dragSourceOptions = options || null;\n\n        if ((0, _isRef.isRef)(node)) {\n          this.dragSourceRef = node;\n        } else {\n          this.dragSourceNode = node;\n        }\n\n        this.reconnectDragSource();\n      },\n      dragPreview: (node, options) => {\n        this.clearDragPreview();\n        this.dragPreviewOptions = options || null;\n\n        if ((0, _isRef.isRef)(node)) {\n          this.dragPreviewRef = node;\n        } else {\n          this.dragPreviewNode = node;\n        }\n\n        this.reconnectDragPreview();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dragSourceRef = null;\n    this.dragSourceOptionsInternal = null; // The drag preview may either be attached via ref or connect function\n\n    this.dragPreviewRef = null;\n    this.dragPreviewOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDragSource = null;\n    this.lastConnectedDragSourceOptions = null;\n    this.lastConnectedDragPreview = null;\n    this.lastConnectedDragPreviewOptions = null;\n    this.backend = backend;\n  }\n\n}\n\nexports.SourceConnector = SourceConnector;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","SourceConnector","_shallowequal","_isRef","_wrapConnectorHooks","receiveHandlerId","newHandlerId","handlerId","reconnect","dragSource","dragSourceOptionsInternal","options","dragPreviewOptionsInternal","didChange","reconnectDragSource","reconnectDragPreview","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","lastConnectedDragSource","lastConnectedHandlerId","lastConnectedDragSourceOptions","dragSourceOptions","dragSourceUnsubscribe","backend","connectDragSource","forceDidChange","dragPreview","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","lastConnectedDragPreview","lastConnectedDragPreviewOptions","dragPreviewOptions","dragPreviewUnsubscribe","connectDragPreview","shallowEqual","undefined","dragPreviewRef","dragPreviewNode","dragSourceNode","dragSourceRef","current","clearDragSource","clearDragPreview","constructor","hooks","wrapConnectorHooks","node","isRef"]
}
