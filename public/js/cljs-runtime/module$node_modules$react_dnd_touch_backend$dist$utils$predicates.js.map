{
"version":3,
"file":"module$node_modules$react_dnd_touch_backend$dist$utils$predicates.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CAoBAA,QAA6B,CAACC,CAAD,CAAI,CAG/B,MAAoBC,KAAAA,EAApB,GAAOD,CAAEE,CAAAA,MAAT,EAAiCF,CAAEE,CAAAA,MAAnC,GAA8CC,WAAYC,CAAAA,IAH3B,CAnBjCT,QAAQU,CAAAA,kBAAR,CAgCAA,QAA2B,CAACL,CAAD,CAAI,CAG7B,MAAqBC,KAAAA,EAArB,GAAOD,CAAEM,CAAAA,OAAT,EAAsE,CAAtE,IAAmCN,CAAEM,CAAAA,OAArC,CAA+CC,YAAaH,CAAAA,IAA5D,CAH6B,CA/B/BT,QAAQa,CAAAA,YAAR,CAqCAA,QAAqB,CAACR,CAAD,CAAI,CACvB,MAAO,CAAC,CAACA,CAAES,CAAAA,aADY,CAnCzB,OAAMF,aAAe,CACnBH,KAAM,CADa,CAEnBM,MAAO,CAFY,CAGnBC,OAAQ,CAHW,CAArB,CAMMR,YAAc,CAClBC,KAAM,CADY,CAElBO,OAAQ,CAFU;AAGlBD,MAAO,CAHW,CAhB0G;",
"sources":["node_modules/react-dnd-touch-backend/dist/utils/predicates.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_dnd_touch_backend$dist$utils$predicates\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.eventShouldStartDrag = eventShouldStartDrag;\nexports.eventShouldEndDrag = eventShouldEndDrag;\nexports.isTouchEvent = isTouchEvent;\n// Used for MouseEvent.buttons (note the s on the end).\nconst MouseButtons = {\n  Left: 1,\n  Right: 2,\n  Center: 4\n}; // Used for e.button (note the lack of an s on the end).\n\nconst MouseButton = {\n  Left: 0,\n  Center: 1,\n  Right: 2\n};\n/**\n * Only touch events and mouse events where the left button is pressed should initiate a drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\nfunction eventShouldStartDrag(e) {\n  // For touch events, button will be undefined. If e.button is defined,\n  // then it should be MouseButton.Left.\n  return e.button === undefined || e.button === MouseButton.Left;\n}\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\n\nfunction eventShouldEndDrag(e) {\n  // Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n  // bit field unset if the left mouse button has been released\n  return e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0;\n}\n\nfunction isTouchEvent(e) {\n  return !!e.targetTouches;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","eventShouldStartDrag","e","undefined","button","MouseButton","Left","eventShouldEndDrag","buttons","MouseButtons","isTouchEvent","targetTouches","Right","Center"]
}
