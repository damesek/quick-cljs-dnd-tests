shadow$provide.module$node_modules$react_dnd$dist$internals$DragSourceMonitorImpl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.DragSourceMonitorImpl=void 0;var _invariant=require("module$node_modules$$react_dnd$invariant$dist$index");let isCallingCanDrag=!1,isCallingIsDragging=!1;class DragSourceMonitorImpl{receiveHandlerId(sourceId){this.sourceId=sourceId}getHandlerId(){return this.sourceId}canDrag(){(0,_invariant.invariant)(!isCallingCanDrag,
"You may not call monitor.canDrag() inside your canDrag() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");try{return isCallingCanDrag=!0,this.internalMonitor.canDragSource(this.sourceId)}finally{isCallingCanDrag=!1}}isDragging(){if(!this.sourceId)return!1;(0,_invariant.invariant)(!isCallingIsDragging,"You may not call monitor.isDragging() inside your isDragging() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");
try{return isCallingIsDragging=!0,this.internalMonitor.isDraggingSource(this.sourceId)}finally{isCallingIsDragging=!1}}subscribeToStateChange(listener,options){return this.internalMonitor.subscribeToStateChange(listener,options)}isDraggingSource(sourceId){return this.internalMonitor.isDraggingSource(sourceId)}isOverTarget(targetId,options){return this.internalMonitor.isOverTarget(targetId,options)}getTargetIds(){return this.internalMonitor.getTargetIds()}isSourcePublic(){return this.internalMonitor.isSourcePublic()}getSourceId(){return this.internalMonitor.getSourceId()}subscribeToOffsetChange(listener){return this.internalMonitor.subscribeToOffsetChange(listener)}canDragSource(sourceId){return this.internalMonitor.canDragSource(sourceId)}canDropOnTarget(targetId){return this.internalMonitor.canDropOnTarget(targetId)}getItemType(){return this.internalMonitor.getItemType()}getItem(){return this.internalMonitor.getItem()}getDropResult(){return this.internalMonitor.getDropResult()}didDrop(){return this.internalMonitor.didDrop()}getInitialClientOffset(){return this.internalMonitor.getInitialClientOffset()}getInitialSourceClientOffset(){return this.internalMonitor.getInitialSourceClientOffset()}getSourceClientOffset(){return this.internalMonitor.getSourceClientOffset()}getClientOffset(){return this.internalMonitor.getClientOffset()}getDifferenceFromInitialOffset(){return this.internalMonitor.getDifferenceFromInitialOffset()}constructor(manager){this.sourceId=
null;this.internalMonitor=manager.getMonitor()}}exports.DragSourceMonitorImpl=DragSourceMonitorImpl}
//# sourceMappingURL=module$node_modules$react_dnd$dist$internals$DragSourceMonitorImpl.js.map
