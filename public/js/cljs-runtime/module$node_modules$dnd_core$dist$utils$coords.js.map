{
"version":3,
"file":"module$node_modules$dnd_core$dist$utils$coords.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgB3GC,QAASA,IAAG,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACjB,MAAO,CACLC,EAAGF,CAAEE,CAAAA,CAALA,CAASD,CAAEC,CAAAA,CADN,CAELC,EAAGH,CAAEG,CAAAA,CAALA,CAASF,CAAEE,CAAAA,CAFN,CADU,CAanBC,QAASA,SAAQ,CAACJ,CAAD,CAAIC,CAAJ,CAAO,CACtB,MAAO,CACLC,EAAGF,CAAEE,CAAAA,CAALA,CAASD,CAAEC,CAAAA,CADN,CAELC,EAAGH,CAAEG,CAAAA,CAALA,CAASF,CAAEE,CAAAA,CAFN,CADe,CA1BxBE,MAAOC,CAAAA,cAAP,CAAsBR,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CS,MAAO,CAAA,CADoC,CAA7C,CAGAT,QAAQC,CAAAA,GAAR,CAAcA,GACdD,QAAQM,CAAAA,QAAR,CAAmBA,QACnBN,QAAQU,CAAAA,qBAAR,CAqCAA,QAA8B,CAACC,KAAD,CAAQ,CACpC,MAAM,CACJC,YADI,CAEJC,mBAFI,CAGJC,yBAHI,CAAA,CAIFH,KAEJ,OAAKC,aAAL,EAAsBC,mBAAtB,EAA8CC,yBAA9C,CAIOR,QAAA,CAASL,GAAA,CAAIW,YAAJ;AAAkBE,yBAAlB,CAAT,CAAuDD,mBAAvD,CAJP,CACS,IAR2B,CApCtCb,QAAQe,CAAAA,8BAAR,CAwDAA,QAAuC,CAACJ,KAAD,CAAQ,CAC7C,MAAM,CACJC,YADI,CAEJC,mBAFI,CAAA,CAGFF,KAEJ,OAAKC,aAAL,EAAsBC,mBAAtB,CAIOP,QAAA,CAASM,YAAT,CAAuBC,mBAAvB,CAJP,CACS,IAPoC,CAjE4D;",
"sources":["node_modules/dnd-core/dist/utils/coords.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dnd_core$dist$utils$coords\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = add;\nexports.subtract = subtract;\nexports.getSourceClientOffset = getSourceClientOffset;\nexports.getDifferenceFromInitialOffset = getDifferenceFromInitialOffset;\n\n/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */\nfunction add(a, b) {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y\n  };\n}\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */\n\n\nfunction subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */\n\n\nfunction getSourceClientOffset(state) {\n  const {\n    clientOffset,\n    initialClientOffset,\n    initialSourceClientOffset\n  } = state;\n\n  if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n    return null;\n  }\n\n  return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\n}\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */\n\n\nfunction getDifferenceFromInitialOffset(state) {\n  const {\n    clientOffset,\n    initialClientOffset\n  } = state;\n\n  if (!clientOffset || !initialClientOffset) {\n    return null;\n  }\n\n  return subtract(clientOffset, initialClientOffset);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","add","a","b","x","y","subtract","Object","defineProperty","value","getSourceClientOffset","state","clientOffset","initialClientOffset","initialSourceClientOffset","getDifferenceFromInitialOffset"]
}
