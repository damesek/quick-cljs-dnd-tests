{
"version":3,
"file":"module$node_modules$react_dnd$dist$hooks$useDrop$useAccept.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAWAA,QAAkB,CAACC,IAAD,CAAO,CACvB,MAAM,CACJC,MADI,CAAA,CAEFD,IACJ,OAAO,GAAIE,MAAOC,CAAAA,OAAX,EAAoB,EAAA,EAAM,CAC/B,GAAIC,UAAWC,CAAAA,SAAf,EAAyC,IAAzC,EAA0BL,IAAKC,CAAAA,MAA/B,CAA+C,wBAA/C,CACA,OAAOK,MAAMC,CAAAA,OAAN,CAAcN,MAAd,CAAA,CAAwBA,MAAxB,CAAiC,CAACA,MAAD,CAFT,CAA1B,CAGJ,CAACA,MAAD,CAHI,CAJgB,CATzB,KAAIG,WAAaX,OAAA,CAAQ,qDAAR,CAAjB,CAEIS,OAAST,OAAA,CAAQ,iCAAR,CAV0G;",
"sources":["node_modules/react-dnd/dist/hooks/useDrop/useAccept.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_dnd$dist$hooks$useDrop$useAccept\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAccept = useAccept;\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nvar _react = require(\"react\");\n\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\nfunction useAccept(spec) {\n  const {\n    accept\n  } = spec;\n  return (0, _react.useMemo)(() => {\n    (0, _invariant.invariant)(spec.accept != null, 'accept must be defined');\n    return Array.isArray(accept) ? accept : [accept];\n  }, [accept]);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","useAccept","spec","accept","_react","useMemo","_invariant","invariant","Array","isArray"]
}
