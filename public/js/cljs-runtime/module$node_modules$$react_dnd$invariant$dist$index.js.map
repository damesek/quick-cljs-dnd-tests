{
"version":3,
"file":"module$node_modules$$react_dnd$invariant$dist$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAChH,IAAIC,QAAUH,OAAA,CAAQ,qCAAR,CACd,aAEAI,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAQK,CAAAA,SAAR,CAYAA,QAAkB,CAACC,SAAD,CAAYC,MAAZ,CAAoB,GAAGC,IAAvB,CAA6B,CAC7C,GA0B0B,WA1B1B,GA0BO,MAAOP,QA1Bd,EA0BqE,YA1BrE,GA0ByCA,OAAQQ,CAAAA,GAAR,CAAA,QA1BzC,EACiBC,IAAAA,EADjB,GACMH,MADN,CAEI,KAAUI,MAAJ,CAAU,8CAAV,CAAN,CAIJ,GAAI,CAACL,SAAL,CAAgB,CAGd,GAAeI,IAAAA,EAAf,GAAIH,MAAJ,CACEK,SAAA,CAAYD,KAAJ,CAAU,+HAAV,CADV;IAEO,CACL,IAAIE,SAAW,CACfD,UAAA,CAAYD,KAAJ,CAAUJ,MAAOO,CAAAA,OAAP,CAAe,KAAf,CAAsB,QAAS,EAAG,CAClD,MAAON,KAAA,CAAKK,QAAA,EAAL,CAD2C,CAAlC,CAAV,CAGRD,UAAMG,CAAAA,IAAN,CAAa,qBALR,CAQPH,SAAMI,CAAAA,WAAN,CAAoB,CAEpB,MAAMJ,UAAN,CAfc,CAP6B,CAnBiE;",
"sources":["node_modules/@react-dnd/invariant/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$react_dnd$invariant$dist$index\"] = function(global,require,module,exports) {\nvar process = require('process');\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invariant = invariant;\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\nfunction invariant(condition, format, ...args) {\n  if (isProduction()) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    let error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1 // we don't care about invariant's own frame\n    ;\n    throw error;\n  }\n}\n\nfunction isProduction() {\n  return typeof process !== 'undefined' && process.env['NODE_ENV'] === 'production';\n}\n};"],
"names":["shadow$provide","global","require","module","exports","process","Object","defineProperty","value","invariant","condition","format","args","env","undefined","Error","error","argIndex","replace","name","framesToPop"]
}
