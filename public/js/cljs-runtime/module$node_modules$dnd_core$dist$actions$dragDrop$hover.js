shadow$provide.module$node_modules$dnd_core$dist$actions$dragDrop$hover=function(global,require,module,exports){function hoverAllTargets(targetIds,monitor,registry){targetIds.forEach(function(targetId){registry.getTarget(targetId).hover(monitor,targetId)})}Object.defineProperty(exports,"__esModule",{value:!0});exports.createHover=function(manager){return function(targetIdsArg,{clientOffset}={}){(0,_invariant.invariant)(Array.isArray(targetIdsArg),"Expected targetIds to be an array.");targetIdsArg=
targetIdsArg.slice(0);const monitor=manager.getMonitor(),registry=manager.getRegistry();var draggedItemType=monitor.getItemType();for(var i=targetIdsArg.length-1;0<=i;i--){const targetType=registry.getTargetType(targetIdsArg[i]);(0,_matchesType.matchesType)(targetType,draggedItemType)||targetIdsArg.splice(i,1)}(0,_invariant.invariant)(monitor.isDragging(),"Cannot call hover while not dragging.");(0,_invariant.invariant)(!monitor.didDrop(),"Cannot call hover after drop.");for(draggedItemType=0;draggedItemType<
targetIdsArg.length;draggedItemType++)i=targetIdsArg[draggedItemType],(0,_invariant.invariant)(targetIdsArg.lastIndexOf(i)===draggedItemType,"Expected targetIds to be unique in the passed array."),i=registry.getTarget(i),(0,_invariant.invariant)(i,"Expected targetIds to be registered.");hoverAllTargets(targetIdsArg,monitor,registry);return{type:_types.HOVER,payload:{targetIds:targetIdsArg,clientOffset:clientOffset||null}}}};var _invariant=require("module$node_modules$$react_dnd$invariant$dist$index"),
_matchesType=require("module$node_modules$dnd_core$dist$utils$matchesType"),_types=require("module$node_modules$dnd_core$dist$actions$dragDrop$types")}
//# sourceMappingURL=module$node_modules$dnd_core$dist$actions$dragDrop$hover.js.map
