{"version":3,"sources":["dnd/views.cljs"],"mappings":";;;;AAWA,iBAAA,jBAAMA;AAAN,AAAA,0FAAA,2EAAA,mFAAA,kIAAA,mFAAA,iIAAA,mFAAA,wFAAA,mFAAA,8EAAA,mFAAA,oEAAA,2CAAA,oDAAA,+BAAA,iDAAA,4CAAA,mFAAA,oFAAA,mFAAA,2HAAA,mFAAA,8KAAA,2CAAA,qDAAA,IAAA,qEAAA,eAAA;;AAeA,mBAAA,nBAAMC;AAAN,AAAA,0FAAA,0FAAA,mFAAA,2IAAA,mFAAA,kHAAA;;AA8BA,AAAKC,2BAAS,gDAAA,hDAACC;AAGf,0BAAA,1BAAMC;AAAN,AACE,IAAMC,eAAa,gDAAA,hDAACF;AAApB,AACE,iCAAA,2CAAA,rEAACG,yJACuB;AAAA,AACE,wDAAA,4EAAA,2CAAA,xKAACC,wBAAeC,uMACQ,WAAKC;AAAL,AACE,gHAAA,zGAACC,6HAA4BD;GAFvD,oDAIwB,WAAKA,EAAEE;AAAP,AACE,oBAAMF;AAAN,AACE,+CAAA,/CAACG,sBAAOV;;AACR,gHAAA,zGAACQ,mHAAkBD,EAAEE;;AAFvB;;GAL1B,mDASwB,WAAKE;AAAL,AACE,IAAMC,aAAe,uBAAA,vBAACC,AACD;AADrB,AAEE,eAAA,fAAMD;;AACN,yBAAA,lBAASA;;GAf/D,0FAiB0B;AAAA,AACE,mDAAA,nDAACE,0BAAiBR;;AAClB,mBAAA,ZAACS;GAnB7B,yEAoBkB;AAAA,AAAA,0FAAA,kEAAA,mFAAA,8CAAA,mBAAA,mFAAA,8CAAA,WAGkB,4CAAA,AAAAC,gBAAMhB;;;AAG9C,uBAAA,vBAAMiB,sDAAYV;AAAlB,AACE,OAAiBA;;AAEnB,wBAAA,xBAAMY;AAAN,AAAA,0FAAA,gKAAA,2CAAA,+DAAA,KAAA,yFAAA,6FAAA,sEAAA,WAAAD,nMAGkBD,6FACCA;AAJnB,AAKoB,6CAAA,aAAA,nDAAU,AAAAC;GAL9B,kEAAA;AAAA,AAMkB,gHAAA,zGAACV;GANnB,2DAAA;AAAA,AAOc,gHAAA,zGAACA;WAPf,mFAAA,8CAAA;;AA8BA,2BAAA,3BAAMY;AAAN,AAAA,0FAAA,wEAAA,0GAAA,4GAAA,mFAAA,sDAAA,mFAAA,+HAAA,mFAAA,uFAAA,mFAAA,iKAAA,mFAAA,kHAAA,mFAAA,+FAAA,iHAAA,2HAAA,mFAAA,8FAAA,2CAAA,2DAAA,tvDAEItB,0GACAC,4tCAUMoB,iHACDjB;AAdT,AAiBoB,gHAAA,zGAACM;WAjBrB,mFAAA,8CAAA,gCAAA,mFAAA,+FAAA,mFAAA,8CAAA;;AAuBA,gBAAA,hBAAMa;AAAN,AAAA,0FACGD","names":["dnd.views/menu","dnd.views/header","dnd.views/dragged?","reagent.core.atom","dnd.views/drag-and-drop","file-content","reagent.core/create-class","dnd.dnd/subscribe!","js/document.documentElement","e","cljs.core.println","file","cljs.core/reset!","_","class-list","js/document.querySelector","dnd.dnd/unsubscribe!","js/console.log","cljs.core/deref","dnd.views/allow-drop","p1__15255#","dnd.views/drag-me-now","dnd.views/quick-dnd-test","dnd.views/app"],"sourcesContent":["(ns dnd.views\n  (:require [reagent.core :as r]\n            [react :as react]\n            [dnd.state :refer [app-state]]\n            [dnd.events :refer [increment decrement]]\n            [dnd.dnd :as dnd]\n\n            [\"@dnd-kit/core\" :as dnd-kit :refer [DndContext useDraggable useDroppable]]\n            [\"@dnd-kit/utilities\" :refer [CSS]]))\n\n\n(defn menu\n  []\n   [:nav.bg-gray-800\n    [:div.max-w-7xl.mx-auto.px-4.sm:px-6.lg:px-8\n     [:div.flex.items-center.justify-between.h-16\n      [:div.flex.items-center\n       [:div.flex-shrink-0\n        [:img.h-8.w-8 {:src \"img/compass-logo-gray-50.png\" :alt \"Measure and build\"}]]\n       [:div.hidden.md:block\n        [:div.ml-10.flex.items-baseline.space-x-4\n         [:a.bg-gray-900.text-white.px-3.py-2.rounded-md.text-sm.font-medium {:href \"#\" :aria-current \"page\"} \"DND-kit Test\"]\n         #_[:a.text-gray-300.hover:bg-gray-700.hover:text-white.px-3.py-2.rounded-md.text-sm.font-medium {:href \"#\"} \"pff\"]\n         #_[:a.text-gray-300.hover:bg-gray-700.hover:text-white.px-3.py-2.rounded-md.text-sm.font-medium {:href \"#\"} \"pff 2\"]]]]]]])\n\n\n(defn header []\n   [:header.bg-white.shadow\n    [:div.max-w-7xl.mx-auto.py-6.px-4.sm:px-6.lg:px-8\n     [:h1.text-3xl.font-bold.text-gray-900 \"DND-kit Playground\"]]])\n\n\n\n;; (defn Droppable [props]\n;;   (let [hook-ret (useDroppable (clj->js {:id \"droppable\"}))]\n;;     (r/as-element\n;;      [:div.bg-yellow-500.rounded-md.shadow-md.m-2.p-3.h-40 {:ref (.-setNodeRef hook-ret)} \n;;       [:button \"dropable\"]])))\n\n;; (defn Draggable [props id something]\n;;   (let [hook-ret (useDraggable (clj->js {:id \"draggable\" :disabled? false}))\n;;         _ (tap> {:draggable (js->clj (useDroppable (clj->js {:id \"droppable\"})) :keywordize-keys true)})\n;;         _ (tap> {:props [props id something]})]\n;;     (r/as-element\n;;      [:div.bg-teal-700.h-20.shadow-md.rounded-md.p-3.m-2 {:ref (.-setNodeRef hook-ret)\n;;                                                           :draggable     \"true\"\n;;                                                           :on-drag-start on-drag-start\n;;                                                           :on-drag       on-drag\n;;                                                           :on-drag-end   on-drag-end}\n;;       (str \"Draggable element: \"\n;;            ;(.-transform hook-ret) ;(js->clj hook-ret)\n;;            )])))\n\n\n\n\n(def dragged? (r/atom false))\n\n\n(defn drag-and-drop []\n  (let [file-content (r/atom false)]\n    (r/create-class\n     {:component-will-mount (fn []\n                              (dnd/subscribe! js/document.documentElement ::picture\n                                              {:start (fn [e]\n                                                        (println \"started something\" e))\n\n                                               :drop  (fn [e file]\n                                                        (when e\n                                                          (reset! dragged? true)\n                                                          (println \"dropped\" e file)))\n\n                                               :end   (fn [_]\n                                                        (let [class-list (-> (js/document.querySelector \".picture\")\n                                                                             (.-classList))]\n                                                          (.add class-list \"none\")\n                                                          (.remove class-list \"block\")))}))\n\n      :component-will-unmount (fn []\n                                (dnd/unsubscribe! js/document.documentElement ::picture)\n                                (js/console.log \"component will unmount\"))\n      :reagent-render (fn []\n                        [:div.picture\n                         [:p \"hello me\"]\n                         [:p \"dropped?\" (str @dragged?)]])})))\n\n\n(defn allow-drop [e]\n  (.preventDefault e))\n\n(defn drag-me-now []\n  [:div.h-10.w-20.rounded-md.shadow-md.bg-teal-700.text-white\n   {:draggable true ; -> otherwise the browser won't let you drag it\n    :on-drag-over allow-drop\n    :on-drag-enter allow-drop\n    :on-drag-start #(.setData (.-dataTransfer %) \"text/plain\" \"IM ROBOT\") ;; for Firefox. You MUST set something as data.\n    :on-drag-end #(println \"drag ended on dragger\")\n    :on-drop #(println \"juhuuu dropped somewhere in the universe\")}\n    [:p \"drag me now\"]])\n\n\n\n;; (defn DnD-Test []\n;;   (let [draggableMarkup [:> Draggable \"hello\"]\n;;         handler-tester   (fn [t e] \n;;                           (tap> {:type t :e e}))\n;;         handlerDragEnd (fn [e]\n;;                          (let [handler-data ((js->clj e :keywordize-keys true))]\n;;                            (tap> {:handlerDragEnd handler-data})))]\n;;   [:> DndContext \n;;    {:onDragEnd handlerDragEnd\n;;     :onDragStart (fn [e] \n;;                    (tap> {:onDragStart e}))}\n;;    (if @dragged?\n;;      draggableMarkup nil) \n;;    [:> Droppable \n;;     (if-not @dragged? \n;;       draggableMarkup \n;;       \"drop here\")]]))\n\n(defn quick-dnd-test []\n  [:div.min-h-full\n   [menu]\n   [header]\n   \n      ;[DnD-Test]\n\n   [:main\n    [:div.max-w-7xl.mx-auto.py-6.sm:px-6.lg:px-8\n     [:div.px-4.py-6.sm:px-0\n      [:div.border-2.border-dashed.border-gray-200.rounded-lg.h-96\n       [:div.flex.grid.gap-4.grid-cols-8.p-3\n        [:div.col-span-8.bg-gray-50\n         [drag-me-now]\n        [drag-and-drop]\n         ]\n        [:div.col-span-5.bg-teal-50\n         {:on-drop #(println \"dropped into dropable area\")}\n         [:p \"dropable area\"] ]\n        [:div.col-span-3.bg-gray-50\n         [:p \"dragable\"]]]]]]]])\n\n\n(defn app []\n  [quick-dnd-test])\n\n"]}