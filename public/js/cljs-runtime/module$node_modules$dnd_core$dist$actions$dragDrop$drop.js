shadow$provide.module$node_modules$dnd_core$dist$actions$dragDrop$drop=function(global,require,module,exports){function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{},ownKeys=Object.keys(source);"function"===typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable})));ownKeys.forEach(function(key){var value=source[key];
key in target?Object.defineProperty(target,key,{value,enumerable:!0,configurable:!0,writable:!0}):target[key]=value})}return target}function verifyInvariants(monitor){(0,_invariant.invariant)(monitor.isDragging(),"Cannot call drop while not dragging.");(0,_invariant.invariant)(!monitor.didDrop(),"Cannot call drop twice during one drag operation.")}function getDroppableTargets(monitor){monitor=monitor.getTargetIds().filter(monitor.canDropOnTarget,monitor);monitor.reverse();return monitor}Object.defineProperty(exports,
"__esModule",{value:!0});exports.createDrop=function(manager){return function(options={}){const monitor=manager.getMonitor(),registry=manager.getRegistry();verifyInvariants(monitor);getDroppableTargets(monitor).forEach((targetId,index)=>{const target=registry.getTarget(targetId);targetId=target?target.drop(monitor,targetId):void 0;(0,_invariant.invariant)("undefined"===typeof targetId||(0,_js_utils.isObject)(targetId),"Drop result must either be an object or undefined.");"undefined"===typeof targetId&&
(targetId=0===index?{}:monitor.getDropResult());index={type:_types.DROP,payload:{dropResult:_objectSpread({},options,targetId)}};manager.dispatch(index)})}};var _invariant=require("module$node_modules$$react_dnd$invariant$dist$index"),_js_utils=require("module$node_modules$dnd_core$dist$utils$js_utils"),_types=require("module$node_modules$dnd_core$dist$actions$dragDrop$types")}
//# sourceMappingURL=module$node_modules$dnd_core$dist$actions$dragDrop$drop.js.map
