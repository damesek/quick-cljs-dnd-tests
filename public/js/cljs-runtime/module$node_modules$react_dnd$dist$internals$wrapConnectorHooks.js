shadow$provide.module$node_modules$react_dnd$dist$internals$wrapConnectorHooks=function(global,require,module,exports){function wrapHookToRecognizeElement(hook){return(elementOrNode=null,options=null)=>{if(!(0,_react.isValidElement)(elementOrNode))return hook(elementOrNode,options),elementOrNode;if("string"!==typeof elementOrNode.type)throw Error("Only native element nodes can now be passed to React DnD connectors."+`You can either wrap ${elementOrNode.type.displayName||elementOrNode.type.name||"the component"} into a <div>, or turn it into a `+
"drag source or a drop target itself.");return cloneWithRef(elementOrNode,options?node=>hook(node,options):hook)}}function cloneWithRef(element,newRef){const previousRef=element.ref;(0,_invariant.invariant)("string"!==typeof previousRef,"Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a \x3cspan\x3e or \x3cdiv\x3e. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs");return previousRef?(0,_react.cloneElement)(element,
{ref:node=>{"function"===typeof previousRef?previousRef(node):previousRef.current=node;"function"===typeof newRef?newRef(node):newRef.current=node}}):(0,_react.cloneElement)(element,{ref:newRef})}Object.defineProperty(exports,"__esModule",{value:!0});exports.wrapConnectorHooks=function(hooks){const wrappedHooks={};Object.keys(hooks).forEach(key=>{const hook=hooks[key];if(key.endsWith("Ref"))wrappedHooks[key]=hooks[key];else{const wrappedHook=wrapHookToRecognizeElement(hook);wrappedHooks[key]=()=>
wrappedHook}});return wrappedHooks};var _invariant=require("module$node_modules$$react_dnd$invariant$dist$index"),_react=require("module$node_modules$react$index")}
//# sourceMappingURL=module$node_modules$react_dnd$dist$internals$wrapConnectorHooks.js.map
