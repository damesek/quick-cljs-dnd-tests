shadow$provide.module$node_modules$dnd_core$dist$actions$dragDrop$beginDrag=function(global,require,module,exports){function verifyInvariants(sourceIds,monitor,registry){(0,_invariant.invariant)(!monitor.isDragging(),"Cannot call beginDrag while dragging.");sourceIds.forEach(function(sourceId){(0,_invariant.invariant)(registry.getSource(sourceId),"Expected sourceIds to be registered.")})}Object.defineProperty(exports,"__esModule",{value:!0});exports.createBeginDrag=function(manager){return function(sourceIds=
[],options={publishSource:!0}){const {publishSource=!0,clientOffset,getSourceClientOffset}=options;var monitor=manager.getMonitor();options=manager.getRegistry();manager.dispatch((0,_setClientOffset.setClientOffset)(clientOffset));verifyInvariants(sourceIds,monitor,options);var sourceId=null;for(let i=sourceIds.length-1;0<=i;i--)if(monitor.canDragSource(sourceIds[i])){sourceId=sourceIds[i];break}sourceIds=sourceId;if(null==sourceIds)manager.dispatch(ResetCoordinatesAction);else{sourceId=null;if(clientOffset){if(!getSourceClientOffset)throw Error("getSourceClientOffset must be defined");
(0,_invariant.invariant)("function"===typeof getSourceClientOffset,"When clientOffset is provided, getSourceClientOffset must be a function.");sourceId=getSourceClientOffset(sourceIds)}manager.dispatch((0,_setClientOffset.setClientOffset)(clientOffset,sourceId));monitor=options.getSource(sourceIds).beginDrag(monitor,sourceIds);if(null!=monitor)return(0,_invariant.invariant)((0,_js_utils.isObject)(monitor),"Item must be an object."),options.pinSource(sourceIds),options=options.getSourceType(sourceIds),
{type:_types.BEGIN_DRAG,payload:{itemType:options,item:monitor,sourceId:sourceIds,clientOffset:clientOffset||null,sourceClientOffset:sourceId||null,isSourcePublic:!!publishSource}}}}};var _invariant=require("module$node_modules$$react_dnd$invariant$dist$index"),_js_utils=require("module$node_modules$dnd_core$dist$utils$js_utils"),_setClientOffset=require("module$node_modules$dnd_core$dist$actions$dragDrop$local$setClientOffset"),_types=require("module$node_modules$dnd_core$dist$actions$dragDrop$types");
const ResetCoordinatesAction={type:_types.INIT_COORDS,payload:{clientOffset:null,sourceClientOffset:null}}}
//# sourceMappingURL=module$node_modules$dnd_core$dist$actions$dragDrop$beginDrag.js.map
