{
"version":3,
"file":"module$node_modules$dnd_core$dist$classes$DragDropMonitorImpl.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/dnd-core/dist/classes/DragDropMonitorImpl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dnd_core$dist$classes$DragDropMonitorImpl\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DragDropMonitorImpl = void 0;\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nvar _coords = require(\"../utils/coords.js\");\n\nvar _dirtiness = require(\"../utils/dirtiness.js\");\n\nvar _matchesType = require(\"../utils/matchesType.js\");\n\nclass DragDropMonitorImpl {\n  subscribeToStateChange(listener, options = {}) {\n    const {\n      handlerIds\n    } = options;\n    (0, _invariant.invariant)(typeof listener === 'function', 'listener must be a function.');\n    (0, _invariant.invariant)(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');\n    let prevStateId = this.store.getState().stateId;\n\n    const handleChange = () => {\n      const state = this.store.getState();\n      const currentStateId = state.stateId;\n\n      try {\n        const canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !(0, _dirtiness.areDirty)(state.dirtyHandlerIds, handlerIds);\n\n        if (!canSkipListener) {\n          listener();\n        }\n      } finally {\n        prevStateId = currentStateId;\n      }\n    };\n\n    return this.store.subscribe(handleChange);\n  }\n\n  subscribeToOffsetChange(listener) {\n    (0, _invariant.invariant)(typeof listener === 'function', 'listener must be a function.');\n    let previousState = this.store.getState().dragOffset;\n\n    const handleChange = () => {\n      const nextState = this.store.getState().dragOffset;\n\n      if (nextState === previousState) {\n        return;\n      }\n\n      previousState = nextState;\n      listener();\n    };\n\n    return this.store.subscribe(handleChange);\n  }\n\n  canDragSource(sourceId) {\n    if (!sourceId) {\n      return false;\n    }\n\n    const source = this.registry.getSource(sourceId);\n    (0, _invariant.invariant)(source, `Expected to find a valid source. sourceId=${sourceId}`);\n\n    if (this.isDragging()) {\n      return false;\n    }\n\n    return source.canDrag(this, sourceId);\n  }\n\n  canDropOnTarget(targetId) {\n    // undefined on initial render\n    if (!targetId) {\n      return false;\n    }\n\n    const target = this.registry.getTarget(targetId);\n    (0, _invariant.invariant)(target, `Expected to find a valid target. targetId=${targetId}`);\n\n    if (!this.isDragging() || this.didDrop()) {\n      return false;\n    }\n\n    const targetType = this.registry.getTargetType(targetId);\n    const draggedItemType = this.getItemType();\n    return (0, _matchesType.matchesType)(targetType, draggedItemType) && target.canDrop(this, targetId);\n  }\n\n  isDragging() {\n    return Boolean(this.getItemType());\n  }\n\n  isDraggingSource(sourceId) {\n    // undefined on initial render\n    if (!sourceId) {\n      return false;\n    }\n\n    const source = this.registry.getSource(sourceId, true);\n    (0, _invariant.invariant)(source, `Expected to find a valid source. sourceId=${sourceId}`);\n\n    if (!this.isDragging() || !this.isSourcePublic()) {\n      return false;\n    }\n\n    const sourceType = this.registry.getSourceType(sourceId);\n    const draggedItemType = this.getItemType();\n\n    if (sourceType !== draggedItemType) {\n      return false;\n    }\n\n    return source.isDragging(this, sourceId);\n  }\n\n  isOverTarget(targetId, options = {\n    shallow: false\n  }) {\n    // undefined on initial render\n    if (!targetId) {\n      return false;\n    }\n\n    const {\n      shallow\n    } = options;\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const targetType = this.registry.getTargetType(targetId);\n    const draggedItemType = this.getItemType();\n\n    if (draggedItemType && !(0, _matchesType.matchesType)(targetType, draggedItemType)) {\n      return false;\n    }\n\n    const targetIds = this.getTargetIds();\n\n    if (!targetIds.length) {\n      return false;\n    }\n\n    const index = targetIds.indexOf(targetId);\n\n    if (shallow) {\n      return index === targetIds.length - 1;\n    } else {\n      return index > -1;\n    }\n  }\n\n  getItemType() {\n    return this.store.getState().dragOperation.itemType;\n  }\n\n  getItem() {\n    return this.store.getState().dragOperation.item;\n  }\n\n  getSourceId() {\n    return this.store.getState().dragOperation.sourceId;\n  }\n\n  getTargetIds() {\n    return this.store.getState().dragOperation.targetIds;\n  }\n\n  getDropResult() {\n    return this.store.getState().dragOperation.dropResult;\n  }\n\n  didDrop() {\n    return this.store.getState().dragOperation.didDrop;\n  }\n\n  isSourcePublic() {\n    return Boolean(this.store.getState().dragOperation.isSourcePublic);\n  }\n\n  getInitialClientOffset() {\n    return this.store.getState().dragOffset.initialClientOffset;\n  }\n\n  getInitialSourceClientOffset() {\n    return this.store.getState().dragOffset.initialSourceClientOffset;\n  }\n\n  getClientOffset() {\n    return this.store.getState().dragOffset.clientOffset;\n  }\n\n  getSourceClientOffset() {\n    return (0, _coords.getSourceClientOffset)(this.store.getState().dragOffset);\n  }\n\n  getDifferenceFromInitialOffset() {\n    return (0, _coords.getDifferenceFromInitialOffset)(this.store.getState().dragOffset);\n  }\n\n  constructor(store, registry) {\n    this.store = store;\n    this.registry = registry;\n  }\n\n}\n\nexports.DragDropMonitorImpl = DragDropMonitorImpl;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","DragDropMonitorImpl","_invariant","_coords","_dirtiness","_matchesType","subscribeToStateChange","listener","options","handlerIds","invariant","Array","isArray","prevStateId","store","getState","stateId","subscribe","handleChange","state","currentStateId","areDirty","dirtyHandlerIds","subscribeToOffsetChange","previousState","dragOffset","nextState","canDragSource","sourceId","source","registry","getSource","isDragging","canDrag","canDropOnTarget","targetId","target","getTarget","didDrop","targetType","getTargetType","draggedItemType","getItemType","matchesType","canDrop","isDraggingSource","isSourcePublic","sourceType","getSourceType","isOverTarget","shallow","targetIds","getTargetIds","length","index","indexOf","dragOperation","itemType","getItem","item","getSourceId","getDropResult","dropResult","getInitialClientOffset","initialClientOffset","getInitialSourceClientOffset","initialSourceClientOffset","getClientOffset","clientOffset","getSourceClientOffset","getDifferenceFromInitialOffset","constructor"]
}
