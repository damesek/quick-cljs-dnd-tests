shadow$provide.module$node_modules$dnd_core$dist$classes$DragDropMonitorImpl=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.DragDropMonitorImpl=void 0;var _invariant=require("module$node_modules$$react_dnd$invariant$dist$index"),_coords=require("module$node_modules$dnd_core$dist$utils$coords"),_dirtiness=require("module$node_modules$dnd_core$dist$utils$dirtiness"),_matchesType=require("module$node_modules$dnd_core$dist$utils$matchesType");class DragDropMonitorImpl{subscribeToStateChange(listener,
options={}){const {handlerIds}=options;(0,_invariant.invariant)("function"===typeof listener,"listener must be a function.");(0,_invariant.invariant)("undefined"===typeof handlerIds||Array.isArray(handlerIds),"handlerIds, when specified, must be an array of strings.");let prevStateId=this.store.getState().stateId;return this.store.subscribe(()=>{const state=this.store.getState(),currentStateId=state.stateId;try{currentStateId===prevStateId||currentStateId===prevStateId+1&&!(0,_dirtiness.areDirty)(state.dirtyHandlerIds,
handlerIds)||listener()}finally{prevStateId=currentStateId}})}subscribeToOffsetChange(listener){(0,_invariant.invariant)("function"===typeof listener,"listener must be a function.");let previousState=this.store.getState().dragOffset;return this.store.subscribe(()=>{const nextState=this.store.getState().dragOffset;nextState!==previousState&&(previousState=nextState,listener())})}canDragSource(sourceId){if(!sourceId)return!1;const source=this.registry.getSource(sourceId);(0,_invariant.invariant)(source,
`Expected to find a valid source. sourceId=${sourceId}`);return this.isDragging()?!1:source.canDrag(this,sourceId)}canDropOnTarget(targetId){if(!targetId)return!1;const target=this.registry.getTarget(targetId);(0,_invariant.invariant)(target,`Expected to find a valid target. targetId=${targetId}`);if(!this.isDragging()||this.didDrop())return!1;const targetType=this.registry.getTargetType(targetId),draggedItemType=this.getItemType();return(0,_matchesType.matchesType)(targetType,draggedItemType)&&target.canDrop(this,
targetId)}isDragging(){return!!this.getItemType()}isDraggingSource(sourceId){if(!sourceId)return!1;const source=this.registry.getSource(sourceId,!0);(0,_invariant.invariant)(source,`Expected to find a valid source. sourceId=${sourceId}`);if(!this.isDragging()||!this.isSourcePublic())return!1;const sourceType=this.registry.getSourceType(sourceId),draggedItemType=this.getItemType();return sourceType!==draggedItemType?!1:source.isDragging(this,sourceId)}isOverTarget(targetId,options={shallow:!1}){if(!targetId)return!1;
({shallow:options}=options);if(!this.isDragging())return!1;var targetType=this.registry.getTargetType(targetId);const draggedItemType=this.getItemType();if(draggedItemType&&!(0,_matchesType.matchesType)(targetType,draggedItemType))return!1;targetType=this.getTargetIds();if(!targetType.length)return!1;targetId=targetType.indexOf(targetId);return options?targetId===targetType.length-1:-1<targetId}getItemType(){return this.store.getState().dragOperation.itemType}getItem(){return this.store.getState().dragOperation.item}getSourceId(){return this.store.getState().dragOperation.sourceId}getTargetIds(){return this.store.getState().dragOperation.targetIds}getDropResult(){return this.store.getState().dragOperation.dropResult}didDrop(){return this.store.getState().dragOperation.didDrop}isSourcePublic(){return!!this.store.getState().dragOperation.isSourcePublic}getInitialClientOffset(){return this.store.getState().dragOffset.initialClientOffset}getInitialSourceClientOffset(){return this.store.getState().dragOffset.initialSourceClientOffset}getClientOffset(){return this.store.getState().dragOffset.clientOffset}getSourceClientOffset(){return(0,_coords.getSourceClientOffset)(this.store.getState().dragOffset)}getDifferenceFromInitialOffset(){return(0,_coords.getDifferenceFromInitialOffset)(this.store.getState().dragOffset)}constructor(store,
registry){this.store=store;this.registry=registry}}exports.DragDropMonitorImpl=DragDropMonitorImpl}
//# sourceMappingURL=module$node_modules$dnd_core$dist$classes$DragDropMonitorImpl.js.map
