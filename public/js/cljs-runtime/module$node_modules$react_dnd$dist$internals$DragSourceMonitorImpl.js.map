{
"version":3,
"file":"module$node_modules$react_dnd$dist$internals$DragSourceMonitorImpl.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/react-dnd/dist/internals/DragSourceMonitorImpl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_dnd$dist$internals$DragSourceMonitorImpl\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DragSourceMonitorImpl = void 0;\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nlet isCallingCanDrag = false;\nlet isCallingIsDragging = false;\n\nclass DragSourceMonitorImpl {\n  receiveHandlerId(sourceId) {\n    this.sourceId = sourceId;\n  }\n\n  getHandlerId() {\n    return this.sourceId;\n  }\n\n  canDrag() {\n    (0, _invariant.invariant)(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingCanDrag = true;\n      return this.internalMonitor.canDragSource(this.sourceId);\n    } finally {\n      isCallingCanDrag = false;\n    }\n  }\n\n  isDragging() {\n    if (!this.sourceId) {\n      return false;\n    }\n\n    (0, _invariant.invariant)(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingIsDragging = true;\n      return this.internalMonitor.isDraggingSource(this.sourceId);\n    } finally {\n      isCallingIsDragging = false;\n    }\n  }\n\n  subscribeToStateChange(listener, options) {\n    return this.internalMonitor.subscribeToStateChange(listener, options);\n  }\n\n  isDraggingSource(sourceId) {\n    return this.internalMonitor.isDraggingSource(sourceId);\n  }\n\n  isOverTarget(targetId, options) {\n    return this.internalMonitor.isOverTarget(targetId, options);\n  }\n\n  getTargetIds() {\n    return this.internalMonitor.getTargetIds();\n  }\n\n  isSourcePublic() {\n    return this.internalMonitor.isSourcePublic();\n  }\n\n  getSourceId() {\n    return this.internalMonitor.getSourceId();\n  }\n\n  subscribeToOffsetChange(listener) {\n    return this.internalMonitor.subscribeToOffsetChange(listener);\n  }\n\n  canDragSource(sourceId) {\n    return this.internalMonitor.canDragSource(sourceId);\n  }\n\n  canDropOnTarget(targetId) {\n    return this.internalMonitor.canDropOnTarget(targetId);\n  }\n\n  getItemType() {\n    return this.internalMonitor.getItemType();\n  }\n\n  getItem() {\n    return this.internalMonitor.getItem();\n  }\n\n  getDropResult() {\n    return this.internalMonitor.getDropResult();\n  }\n\n  didDrop() {\n    return this.internalMonitor.didDrop();\n  }\n\n  getInitialClientOffset() {\n    return this.internalMonitor.getInitialClientOffset();\n  }\n\n  getInitialSourceClientOffset() {\n    return this.internalMonitor.getInitialSourceClientOffset();\n  }\n\n  getSourceClientOffset() {\n    return this.internalMonitor.getSourceClientOffset();\n  }\n\n  getClientOffset() {\n    return this.internalMonitor.getClientOffset();\n  }\n\n  getDifferenceFromInitialOffset() {\n    return this.internalMonitor.getDifferenceFromInitialOffset();\n  }\n\n  constructor(manager) {\n    this.sourceId = null;\n    this.internalMonitor = manager.getMonitor();\n  }\n\n}\n\nexports.DragSourceMonitorImpl = DragSourceMonitorImpl;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","DragSourceMonitorImpl","_invariant","isCallingCanDrag","isCallingIsDragging","receiveHandlerId","sourceId","getHandlerId","canDrag","invariant","internalMonitor","canDragSource","isDragging","isDraggingSource","subscribeToStateChange","listener","options","isOverTarget","targetId","getTargetIds","isSourcePublic","getSourceId","subscribeToOffsetChange","canDropOnTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset","constructor","manager","getMonitor"]
}
