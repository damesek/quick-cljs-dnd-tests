shadow$provide.module$node_modules$dnd_core$dist$classes$HandlerRegistryImpl=function(global,require,module,exports){function parseRoleFromHandlerId(handlerId){switch(handlerId[0]){case "S":return _interfaces.HandlerRole.SOURCE;case "T":return _interfaces.HandlerRole.TARGET;default:throw Error(`Cannot parse handler ID: ${handlerId}`);}}function mapContainsValue(map,searchValue){map=map.entries();let isDone;do{const {done,value:[,value]}=map.next();if(value===searchValue)return!0;isDone=!!done}while(!isDone);
return!1}Object.defineProperty(exports,"__esModule",{value:!0});exports.HandlerRegistryImpl=void 0;var _asap=require("module$node_modules$$react_dnd$asap$dist$index"),_invariant=require("module$node_modules$$react_dnd$invariant$dist$index"),_registry=require("module$node_modules$dnd_core$dist$actions$registry"),_contracts=require("module$node_modules$dnd_core$dist$contracts"),_interfaces=require("module$node_modules$dnd_core$dist$interfaces"),_getNextUniqueId=require("module$node_modules$dnd_core$dist$utils$getNextUniqueId");
class HandlerRegistryImpl{addSource(type,source){(0,_contracts.validateType)(type);(0,_contracts.validateSourceContract)(source);type=this.addHandler(_interfaces.HandlerRole.SOURCE,type,source);this.store.dispatch((0,_registry.addSource)(type));return type}addTarget(type,target){(0,_contracts.validateType)(type,!0);(0,_contracts.validateTargetContract)(target);type=this.addHandler(_interfaces.HandlerRole.TARGET,type,target);this.store.dispatch((0,_registry.addTarget)(type));return type}containsHandler(handler){return mapContainsValue(this.dragSources,
handler)||mapContainsValue(this.dropTargets,handler)}getSource(sourceId,includePinned=!1){(0,_invariant.invariant)(this.isSourceId(sourceId),"Expected a valid source ID.");return includePinned&&sourceId===this.pinnedSourceId?this.pinnedSource:this.dragSources.get(sourceId)}getTarget(targetId){(0,_invariant.invariant)(this.isTargetId(targetId),"Expected a valid target ID.");return this.dropTargets.get(targetId)}getSourceType(sourceId){(0,_invariant.invariant)(this.isSourceId(sourceId),"Expected a valid source ID.");
return this.types.get(sourceId)}getTargetType(targetId){(0,_invariant.invariant)(this.isTargetId(targetId),"Expected a valid target ID.");return this.types.get(targetId)}isSourceId(handlerId){return parseRoleFromHandlerId(handlerId)===_interfaces.HandlerRole.SOURCE}isTargetId(handlerId){return parseRoleFromHandlerId(handlerId)===_interfaces.HandlerRole.TARGET}removeSource(sourceId){(0,_invariant.invariant)(this.getSource(sourceId),"Expected an existing source.");this.store.dispatch((0,_registry.removeSource)(sourceId));
(0,_asap.asap)(()=>{this.dragSources.delete(sourceId);this.types.delete(sourceId)})}removeTarget(targetId){(0,_invariant.invariant)(this.getTarget(targetId),"Expected an existing target.");this.store.dispatch((0,_registry.removeTarget)(targetId));this.dropTargets.delete(targetId);this.types.delete(targetId)}pinSource(sourceId){const source=this.getSource(sourceId);(0,_invariant.invariant)(source,"Expected an existing source.");this.pinnedSourceId=sourceId;this.pinnedSource=source}unpinSource(){(0,_invariant.invariant)(this.pinnedSource,
"No source is pinned at the time.");this.pinnedSource=this.pinnedSourceId=null}addHandler(role,type,handler){a:{var JSCompiler_inline_result=(0,_getNextUniqueId.getNextUniqueId)().toString();switch(role){case _interfaces.HandlerRole.SOURCE:JSCompiler_inline_result=`S${JSCompiler_inline_result}`;break a;case _interfaces.HandlerRole.TARGET:JSCompiler_inline_result=`T${JSCompiler_inline_result}`;break a;default:throw Error(`Unknown Handler Role: ${role}`);}}this.types.set(JSCompiler_inline_result,type);
role===_interfaces.HandlerRole.SOURCE?this.dragSources.set(JSCompiler_inline_result,handler):role===_interfaces.HandlerRole.TARGET&&this.dropTargets.set(JSCompiler_inline_result,handler);return JSCompiler_inline_result}constructor(store){this.types=new Map;this.dragSources=new Map;this.dropTargets=new Map;this.pinnedSource=this.pinnedSourceId=null;this.store=store}}exports.HandlerRegistryImpl=HandlerRegistryImpl}
//# sourceMappingURL=module$node_modules$dnd_core$dist$classes$HandlerRegistryImpl.js.map
